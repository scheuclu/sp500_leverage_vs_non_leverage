# generated by datamodel-codegen:
#   filename:  api.json
#   timestamp: 2025-10-24T19:22:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import AwareDatetime, BaseModel, Field, constr


class Account(BaseModel):
    """
    Contains the basic identifying information for a trading account.
    """

    currencyCode: Optional[constr(min_length=3, max_length=3)] = Field(
        None,
        description="The ISO 4217 currency code of your account's base currency (e.g., 'USD', 'EUR', 'GBP').",
        examples=["USD"],
    )
    id: Optional[int] = Field(
        None,
        description="Your primary trading account number. This is the same account ID you would see in the Trading 212 web or mobile application.",
    )


class Cash(BaseModel):
    """
    A detailed breakdown of the account's financial state, including cash, investments, and profit/loss.
    """

    blocked: Optional[float] = Field(
        None,
        description="The amount of cash reserved for pending orders. This cash is not available for placing new trades but is part of your withdrawable funds.",
    )
    free: Optional[float] = Field(
        None,
        description="The amount of cash available for investing. This amount is not reserved for any pending orders. Note: Your total withdrawable cash is the sum of `free` and `blocked` cash.",
    )
    invested: Optional[float] = Field(
        None,
        description="The cost basis of your current investments. This represents the total amount of money you have paid for the securities you currently own.",
    )
    pieCash: Optional[float] = Field(
        None,
        description="The sum of uninvested cash held within all of your pies, in your account's main currency.",
    )
    ppl: Optional[float] = Field(
        None,
        description="The total unrealized (potential) profit and loss from all your open positions.",
    )
    result: Optional[float] = Field(
        None,
        description="The all time realised profit loss from all of the trades executed converted into your main account currency.",
    )
    total: Optional[float] = Field(
        None,
        description="The total value of your account. `total = free + blocked + invested + unrealised profit/loss + spending pot`.",
    )


class EnqueuedReportResponse(BaseModel):
    """
    The response received after successfully queueing a new report for generation.
    """

    reportId: Optional[int] = Field(
        None,
        description="The unique identifier for the report you have just requested. Use this ID to track its status via the `GET /history/exports` endpoint.",
    )


class Executor(Enum):
    API = "API"
    IOS = "IOS"
    ANDROID = "ANDROID"
    WEB = "WEB"
    SYSTEM = "SYSTEM"
    AUTOINVEST = "AUTOINVEST"


class FillType(Enum):
    TOTV = "TOTV"
    OTC = "OTC"
    STOCK_SPLIT = "STOCK_SPLIT"
    STOCK_DISTRIBUTION = "STOCK_DISTRIBUTION"
    FOP = "FOP"
    FOP_CORRECTION = "FOP_CORRECTION"
    CUSTOM_STOCK_DISTRIBUTION = "CUSTOM_STOCK_DISTRIBUTION"
    EQUITY_RIGHTS = "EQUITY_RIGHTS"


class Status(Enum):
    LOCAL = "LOCAL"
    UNCONFIRMED = "UNCONFIRMED"
    CONFIRMED = "CONFIRMED"
    NEW = "NEW"
    CANCELLING = "CANCELLING"
    CANCELLED = "CANCELLED"
    PARTIALLY_FILLED = "PARTIALLY_FILLED"
    FILLED = "FILLED"
    REJECTED = "REJECTED"
    REPLACING = "REPLACING"
    REPLACED = "REPLACED"


class TimeValidity(Enum):
    """
    Applicable to stop, limit and stopLimit orders
    """

    DAY = "DAY"
    GOOD_TILL_CANCEL = "GOOD_TILL_CANCEL"


class Type(Enum):
    LIMIT = "LIMIT"
    STOP = "STOP"
    MARKET = "MARKET"
    STOP_LIMIT = "STOP_LIMIT"


class HistoryDividendItem(BaseModel):
    amount: Optional[float] = Field(None, description="In account currency")
    amountInEuro: Optional[float] = None
    grossAmountPerShare: Optional[float] = Field(
        None, description="In instrument currency"
    )
    paidOn: Optional[AwareDatetime] = None
    quantity: Optional[float] = None
    reference: Optional[str] = None
    ticker: Optional[str] = None
    type: Optional[str] = None


class Type1(Enum):
    WITHDRAW = "WITHDRAW"
    DEPOSIT = "DEPOSIT"
    FEE = "FEE"
    TRANSFER = "TRANSFER"


class HistoryTransactionItem(BaseModel):
    amount: Optional[float] = Field(None, description="In the account currency")
    dateTime: Optional[AwareDatetime] = None
    reference: Optional[str] = Field(None, description="ID")
    type: Optional[Type1] = None


class TimeValidity1(Enum):
    """
    Specifies how long the order remains active.
    - `DAY`: The order will automatically expire if not executed by midnight in the time zone of the instrument's exchange.
    - `GOOD_TILL_CANCEL`: The order remains active indefinitely until it is either filled or explicitly cancelled by you.

    """

    DAY = "DAY"
    GOOD_TILL_CANCEL = "GOOD_TILL_CANCEL"


class LimitRequest(BaseModel):
    limitPrice: Optional[float] = Field(
        None,
        description="The target price for the order. For a buy order, this is the maximum price you are willing to pay. For a sell order, this is the minimum price you are willing to accept.",
        examples=[100.23],
    )
    quantity: Optional[float] = Field(
        None,
        description="The number of shares or units to trade. Use a **positive** number (e.g., `10.5`) for a **BUY** order and a **negative** number (e.g., `-10.5`) for a **SELL** order. The value cannot be zero.",
        examples=[0.1],
    )
    ticker: Optional[str] = Field(
        None,
        description="The unique identifier for the instrument you want to trade. You can retrieve a list of available tickers from the `/equity/metadata/instruments` endpoint.",
        examples=["AAPL_US_EQ"],
    )
    timeValidity: Optional[TimeValidity1] = Field(
        None,
        description="Specifies how long the order remains active.\n- `DAY`: The order will automatically expire if not executed by midnight in the time zone of the instrument's exchange.\n- `GOOD_TILL_CANCEL`: The order remains active indefinitely until it is either filled or explicitly cancelled by you.\n",
        examples=["DAY"],
    )


class MarketRequest(BaseModel):
    extendedHours: Optional[bool] = Field(
        False,
        description="If 'true', allows the order to be filled outside of regular trading hours. If the order is placed when the market is fully closed, it will be queued for the next market open.",
        examples=[True],
    )
    quantity: Optional[float] = Field(
        None,
        description="The number of shares or units to trade. Use a **positive** number (e.g., `10.5`) for a **BUY** order and a **negative** number (e.g., `-10.5`) for a **SELL** order. The value cannot be zero.",
        examples=[0.1],
    )
    ticker: Optional[str] = Field(
        None,
        description="The unique identifier for the instrument to trade. Retrieve from the `/equity/metadata/instruments` endpoint.",
        examples=["AAPL_US_EQ"],
    )


class Status1(Enum):
    """
    The current state of the order in its lifecycle.
    """

    LOCAL = "LOCAL"
    UNCONFIRMED = "UNCONFIRMED"
    CONFIRMED = "CONFIRMED"
    NEW = "NEW"
    CANCELLING = "CANCELLING"
    CANCELLED = "CANCELLED"
    PARTIALLY_FILLED = "PARTIALLY_FILLED"
    FILLED = "FILLED"
    REJECTED = "REJECTED"
    REPLACING = "REPLACING"
    REPLACED = "REPLACED"


class Strategy(Enum):
    """
    The strategy used to place the order, either by `QUANTITY` or `VALUE`. The API currently only supports placing orders by `QUANTITY`.
    """

    QUANTITY = "QUANTITY"
    VALUE = "VALUE"


class Type2(Enum):
    """
    The type of the order, which determines its execution logic.
    """

    LIMIT = "LIMIT"
    STOP = "STOP"
    MARKET = "MARKET"
    STOP_LIMIT = "STOP_LIMIT"


class Order(BaseModel):
    """
    Represents a trade order, containing details about its status, type, and execution.
    """

    creationTime: Optional[AwareDatetime] = Field(
        None, description="The ISO 8601 timestamp of when the order was created."
    )
    extendedHours: Optional[bool] = Field(
        None,
        description="Indicates if the order is eligible for execution outside regular trading hours.",
    )
    filledQuantity: Optional[float] = Field(
        None, description="The number of shares that have been successfully executed."
    )
    filledValue: Optional[float] = Field(
        None,
        description="The total monetary value of the executed portion of the order.",
    )
    id: Optional[int] = Field(
        None, description="A unique, system-generated identifier for the order."
    )
    limitPrice: Optional[float] = Field(
        None, description="The limit price for `LIMIT` and `STOP_LIMIT` orders."
    )
    quantity: Optional[float] = Field(
        None,
        description="The number of shares requested in the order. A negative number indicates a sell order. Applicable to orders placed by quantity.",
    )
    status: Optional[Status1] = Field(
        None, description="The current state of the order in its lifecycle."
    )
    stopPrice: Optional[float] = Field(
        None, description="The stop price for `STOP` and `STOP_LIMIT` orders."
    )
    strategy: Optional[Strategy] = Field(
        None,
        description="The strategy used to place the order, either by `QUANTITY` or `VALUE`. The API currently only supports placing orders by `QUANTITY`.",
    )
    ticker: Optional[str] = Field(
        None,
        description="Unique instrument identifier for the traded asset.",
        examples=["AAPL_US_EQ"],
    )
    type: Optional[Type2] = Field(
        None, description="The type of the order, which determines its execution logic."
    )
    value: Optional[float] = Field(
        None,
        description="The monetary value of the order in your account's currency. Applicable to orders placed by value. Note: Placing orders by value is not currently supported via the API but can be done through other Trading 212 platforms.",
    )


class PaginatedResponseHistoryDividendItem(BaseModel):
    items: Optional[list[HistoryDividendItem]] = None
    nextPagePath: Optional[str] = None


class PaginatedResponseHistoryTransactionItem(BaseModel):
    items: Optional[list[HistoryTransactionItem]] = None
    nextPagePath: Optional[str] = None


class Code(Enum):
    SellingEquityNotOwned = "SellingEquityNotOwned"
    CantLegalyTradeException = "CantLegalyTradeException"
    InsufficientResources = "InsufficientResources"
    InsufficientValueForStocksSell = "InsufficientValueForStocksSell"
    TargetPriceTooFar = "TargetPriceTooFar"
    TargetPriceTooClose = "TargetPriceTooClose"
    NotEligibleForISA = "NotEligibleForISA"
    ShareLendingAgreementNotAccepted = "ShareLendingAgreementNotAccepted"
    InstrumentNotFound = "InstrumentNotFound"
    MaxEquityBuyQuantityExceeded = "MaxEquityBuyQuantityExceeded"
    MaxEquitySellQuantityExceeded = "MaxEquitySellQuantityExceeded"
    LimitPriceMissing = "LimitPriceMissing"
    StopPriceMissing = "StopPriceMissing"
    TickerMissing = "TickerMissing"
    QuantityMissing = "QuantityMissing"
    MaxQuantityExceeded = "MaxQuantityExceeded"
    InvalidValue = "InvalidValue"
    InsufficientFreeForStocksException = "InsufficientFreeForStocksException"
    MinValueExceeded = "MinValueExceeded"
    MinQuantityExceeded = "MinQuantityExceeded"
    PriceTooFar = "PriceTooFar"
    UNDEFINED = "UNDEFINED"
    NotAvailableForRealMoneyAccounts = "NotAvailableForRealMoneyAccounts"
    ExtendedHoursTradingNotAllowed = "ExtendedHoursTradingNotAllowed"
    UnfilledOrderCountExceeded = "UnfilledOrderCountExceeded"


class PlaceOrderError(BaseModel):
    clarification: Optional[str] = None
    code: Optional[Code] = None


class Frontend(Enum):
    """
    Origin
    """

    API = "API"
    IOS = "IOS"
    ANDROID = "ANDROID"
    WEB = "WEB"
    SYSTEM = "SYSTEM"
    AUTOINVEST = "AUTOINVEST"


class Position(BaseModel):
    averagePrice: Optional[float] = None
    currentPrice: Optional[float] = None
    frontend: Optional[Frontend] = Field(None, description="Origin")
    fxPpl: Optional[float] = Field(
        None,
        description="Forex movement impact, only applies to positions with instrument currency that differs from the accounts'",
    )
    initialFillDate: Optional[AwareDatetime] = None
    maxBuy: Optional[float] = Field(
        None, description="Additional quantity that can be bought"
    )
    maxSell: Optional[float] = Field(None, description="Quantity that can be sold")
    pieQuantity: Optional[float] = Field(None, description="Invested in pies")
    ppl: Optional[float] = None
    quantity: Optional[float] = None
    ticker: Optional[str] = Field(
        None, description="Unique instrument identifier", examples=["AAPL_US_EQ"]
    )


class PositionRequest(BaseModel):
    ticker: Optional[str] = None


class ReportDataIncluded(BaseModel):
    """
    A set of booleans to select the data types for a report.
    """

    includeDividends: Optional[bool] = Field(
        None, description="Set to `true` to include dividend history in the report."
    )
    includeInterest: Optional[bool] = Field(
        None, description="Set to `true` to include interest payments in the report."
    )
    includeOrders: Optional[bool] = Field(
        None, description="Set to `true` to include historical orders in the report."
    )
    includeTransactions: Optional[bool] = Field(
        None,
        description="Set to `true` to include cash transactions (deposits, withdrawals, etc.) in the report.",
    )


class Status2(Enum):
    """
    The current status of the report generation. Poll this field until it becomes `Finished`.
    """

    Queued = "Queued"
    Processing = "Processing"
    Running = "Running"
    Canceled = "Canceled"
    Failed = "Failed"
    Finished = "Finished"


class ReportResponse(BaseModel):
    """
    Contains the details and status of a requested CSV report.
    """

    dataIncluded: Optional[ReportDataIncluded] = None
    downloadLink: Optional[str] = Field(
        None,
        description="A temporary URL to download the generated CSV file. This field will only be populated once the report `status` is `Finished`. The link may expire after a certain period.",
    )
    reportId: Optional[int] = Field(
        None, description="The unique identifier for the report."
    )
    status: Optional[Status2] = Field(
        None,
        description="The current status of the report generation. Poll this field until it becomes `Finished`.",
    )
    timeFrom: Optional[AwareDatetime] = None
    timeTo: Optional[AwareDatetime] = None


class StopLimitRequest(BaseModel):
    limitPrice: Optional[float] = Field(
        None,
        description="The price for the subsequent Limit order that is placed after the `stopPrice` is triggered. This defines the maximum price for a buy or minimum price for a sell.",
        examples=[100.23],
    )
    quantity: Optional[float] = Field(
        None,
        description="The number of shares or units to trade. Use a **positive** number (e.g., `10.5`) for a **BUY** order and a **negative** number (e.g., `-10.5`) for a **SELL** order. The value cannot be zero.",
        examples=[0.1],
    )
    stopPrice: Optional[float] = Field(
        None,
        description="The price at which the order triggers. The trigger is based on the instrument's Last Traded Price (LTP). Once triggered, a Limit order is placed at the `limitPrice`.",
        examples=[100.23],
    )
    ticker: Optional[str] = Field(
        None,
        description="The unique identifier for the instrument to trade. Retrieve from the `/equity/metadata/instruments` endpoint.",
        examples=["AAPL_US_EQ"],
    )
    timeValidity: Optional[TimeValidity1] = Field(
        None,
        description="Specifies how long the order remains active.\n- `DAY`: The order will automatically expire if not executed by midnight in the time zone of the instrument's exchange.\n- `GOOD_TILL_CANCEL`: The order remains active indefinitely until it is either filled or explicitly cancelled by you.\n",
        examples=["DAY"],
    )


class StopRequest(BaseModel):
    quantity: Optional[float] = Field(
        None,
        description="The number of shares or units to trade. Use a **positive** number (e.g., `10.5`) for a **BUY** order and a **negative** number (e.g., `-10.5`) for a **SELL** order. The value cannot be zero.",
        examples=[0.1],
    )
    stopPrice: Optional[float] = Field(
        None,
        description="The price at which the Stop order triggers a Market order. The trigger is based on the instrument's Last Traded Price (LTP).",
        examples=[100.23],
    )
    ticker: Optional[str] = Field(
        None,
        description="The unique identifier for the instrument to trade. Retrieve from the `/equity/metadata/instruments` endpoint.",
        examples=["AAPL_US_EQ"],
    )
    timeValidity: Optional[TimeValidity1] = Field(
        None,
        description="Specifies how long the order remains active.\n- `DAY`: The order will automatically expire if not executed by midnight in the time zone of the instrument's exchange.\n- `GOOD_TILL_CANCEL`: The order remains active indefinitely until it is either filled or explicitly cancelled by you.\n",
        examples=["DAY"],
    )


class Name(Enum):
    COMMISSION_TURNOVER = "COMMISSION_TURNOVER"
    CURRENCY_CONVERSION_FEE = "CURRENCY_CONVERSION_FEE"
    FINRA_FEE = "FINRA_FEE"
    FRENCH_TRANSACTION_TAX = "FRENCH_TRANSACTION_TAX"
    PTM_LEVY = "PTM_LEVY"
    STAMP_DUTY = "STAMP_DUTY"
    STAMP_DUTY_RESERVE_TAX = "STAMP_DUTY_RESERVE_TAX"
    TRANSACTION_FEE = "TRANSACTION_FEE"


class Tax(BaseModel):
    fillId: Optional[str] = None
    name: Optional[Name] = None
    quantity: Optional[float] = None
    timeCharged: Optional[AwareDatetime] = None


class Type3(Enum):
    OPEN = "OPEN"
    CLOSE = "CLOSE"
    BREAK_START = "BREAK_START"
    BREAK_END = "BREAK_END"
    PRE_MARKET_OPEN = "PRE_MARKET_OPEN"
    AFTER_HOURS_OPEN = "AFTER_HOURS_OPEN"
    AFTER_HOURS_CLOSE = "AFTER_HOURS_CLOSE"
    OVERNIGHT_OPEN = "OVERNIGHT_OPEN"


class TimeEvent(BaseModel):
    date: Optional[AwareDatetime] = None
    type: Optional[Type3] = None


class Type4(Enum):
    CRYPTOCURRENCY = "CRYPTOCURRENCY"
    ETF = "ETF"
    FOREX = "FOREX"
    FUTURES = "FUTURES"
    INDEX = "INDEX"
    STOCK = "STOCK"
    WARRANT = "WARRANT"
    CRYPTO = "CRYPTO"
    CVR = "CVR"
    CORPACT = "CORPACT"


class TradableInstrument(BaseModel):
    addedOn: Optional[AwareDatetime] = Field(None, description="On the platform since")
    currencyCode: Optional[constr(min_length=3, max_length=3)] = Field(
        None, description="ISO 4217", examples=["USD"]
    )
    isin: Optional[str] = None
    maxOpenQuantity: Optional[float] = None
    name: Optional[str] = None
    shortName: Optional[str] = None
    ticker: Optional[str] = Field(
        None, description="Unique identifier", examples=["AAPL_US_EQ"]
    )
    type: Optional[Type4] = Field(None, examples=["ETF"])
    workingScheduleId: Optional[int] = Field(
        None, description="Get items in the /exchanges endpoint"
    )


class WorkingSchedule(BaseModel):
    id: Optional[int] = None
    timeEvents: Optional[list[TimeEvent]] = None


class Exchange(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    workingSchedules: Optional[list[WorkingSchedule]] = None


class HistoricalOrder(BaseModel):
    dateCreated: Optional[AwareDatetime] = None
    dateExecuted: Optional[AwareDatetime] = None
    dateModified: Optional[AwareDatetime] = None
    executor: Optional[Executor] = None
    extendedHours: Optional[bool] = Field(
        None,
        description="If true, the order was eligible for execution outside regular trading hours",
    )
    fillCost: Optional[float] = Field(None, description="In your account main currency")
    fillId: Optional[int] = None
    fillPrice: Optional[float] = Field(None, description="In the instrument currency")
    fillResult: Optional[float] = None
    fillType: Optional[FillType] = None
    filledQuantity: Optional[float] = Field(
        None, description="Applicable to quantity orders"
    )
    filledValue: Optional[float] = Field(None, description="Applicable to value orders")
    id: Optional[int] = None
    limitPrice: Optional[float] = Field(None, description="Applicable to limit orders")
    orderedQuantity: Optional[float] = Field(
        None, description="Applicable to quantity orders"
    )
    orderedValue: Optional[float] = Field(
        None, description="Applicable to value orders"
    )
    parentOrder: Optional[int] = None
    status: Optional[Status] = None
    stopPrice: Optional[float] = Field(None, description="Applicable to stop orders")
    taxes: Optional[list[Tax]] = None
    ticker: Optional[str] = None
    timeValidity: Optional[TimeValidity] = Field(
        None, description="Applicable to stop, limit and stopLimit orders"
    )
    type: Optional[Type] = None


class PaginatedResponseHistoricalOrder(BaseModel):
    items: Optional[list[HistoricalOrder]] = None
    nextPagePath: Optional[str] = None


class PublicReportRequest(BaseModel):
    """
    Specifies the parameters for a new CSV report request.
    """

    dataIncluded: Optional[ReportDataIncluded] = None
    timeFrom: Optional[AwareDatetime] = Field(
        None,
        description="The start date and time for the report period, in ISO 8601 format.",
    )
    timeTo: Optional[AwareDatetime] = Field(
        None,
        description="The end date and time for the report period, in ISO 8601 format.",
    )
